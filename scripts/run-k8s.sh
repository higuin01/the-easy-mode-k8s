#!/bin/bash
#########################################################################
# Kubernetes Cluster Operations Script
# 
# This script provides a command-line interface to execute different
# Kubernetes cluster operations based on the provided argument.
#
# Usage: ./run-k8s.sh <command>
#
# Available commands:
#   init        - Initialize Kubernetes cluster on master node
#   join        - Join worker nodes to the cluster
#   metallb     - Configure MetalLB load balancer
#   kps         - Install Kube Prometheus Stack
#   argocd      - Configure ArgoCD Ingress
#   all         - Execute all operations in sequence
#   help        - Show this help message
#
# Author: Generated by Amazon Q
# Date: Generated script
#########################################################################

set -e  # Exit on error

# Configuration variables
export DEBIAN_FRONTEND=noninteractive
PREFIX_IP="192.168.56"
MYDOMAIN="high.sh"
MACHINES_FILE="machines.txt"
HOSTS_FILE="hosts"
POD_NETWORK_CIDR="192.168.0.0/16"
CILIUM_VERSION="1.15.13"
METALLB_VERSION="v0.14.9"
WORKER_SUBNET_PREFIX="10.200"

# Color codes for better readability
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

#########################################################################
# Helper Functions
#########################################################################

# Display colorful log messages
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Display banner
function banner() {
cat << "EOF"
                                                                                                                                  
    ___      ,---,                                                                                                                
  ,--.'|_  ,--.' |                                                                                                                
  |  | :,' |  |  :                                                                    .---.                       
  :  : ' : :  :  :                                               .--.--.                             /. ./|                       
.;__,'  /  :  |  |,--.   ,---.             ,---.     ,--.--.    /  /    '       .--,              .-'-. ' |  ,--.--.        .--,  
|  |   |   |  :  '   |  /     \           /     \   /       \  |  :  /`./     /_ ./|             /___/ \: | /       \     /_ ./|  
:__,'| :   |  |   /' : /    /  |         /    /  | .--.  .-. | |  :  ;_    , ' , ' :          .-'.. '   ' ..--.  .-. | , ' , ' :  
  '  : |__ '  :  | | |.    ' / |        .    ' / |  \__\/: . .  \  \    `./___/ \: |         /___/ \:     ' \__\/: . ./___/ \: |  
  |  | '.'||  |  ' | :'   ;   /|        '   ;   /|  ," .--.; |   `----.   \.  \  ' |         .   \  ' .\    ," .--.; | .  \  ' |  
  ;  :    ;|  :  :_:,''   |  / |        '   |  / | /  /  ,.  |  /  /`--'  / \  ;   :          \   \   ' \ |/  /  ,.  |  \  ;   :  
  |  ,   / |  | ,'    |   :    |        |   :    |;  :   .'   \'--'.     /   \  \  ;           \   \  |--";  :   .'   \  \  \  ;  
   ---`-'  `--''       \   \  /          \   \  / |  ,     .-./  `--'---'     :  \  \           \   \ |   |  ,     .-./   :  \  \ 
                        `----'            `----'   `--`---'                    \  ' ;            '---"     `--`---'        \  ' ; 
                                                                                `--`                                        `--`  
EOF
}

# Define Kubernetes installation variables
function define_k8s_variables() {
    local master_ip=$1
    
    # Commands for master node setup
    KUBEADMIN_INIT="sudo kubeadm init --apiserver-advertise-address ${master_ip} --pod-network-cidr=${POD_NETWORK_CIDR}"
    K8S_CONFIG="mkdir -p /root/.kube && cp -i /etc/kubernetes/admin.conf /root/.kube/config"
    CILIUM_INSTALL="cilium install --version ${CILIUM_VERSION}"
    CMD_METALLB="kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/${METALLB_VERSION}/config/manifests/metallb-native.yaml"
    CMD_INSTALL_HELM="curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash"
    CMD_INSTALL_NGINX="kubectl apply -f scripts/manifest/ingress/manifest.yaml"
    CMD_INSTALL_ARGOCD="kubectl create namespace argocd && kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml"
    CMD_METRIC_SERVER="kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml"
    CMD_KPS="helm repo add prometheus-community https://prometheus-community.github.io/helm-charts &&helm install my-kube-prometheus-stack prometheus-community/kube-prometheus-stack --version 72.6.2 --set prometheus.prometheusSpec.maximumStartupDurationSeconds=300"
    
    # TLS certificate creation
    TLS_CREATE="openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj '/CN=*.demo.com/O=HigorSilva' -addext 'subjectAltName = DNS:*.${MYDOMAIN}'"
}

# Configure MetalLB
function config_metal_lb() {
    local master_ip=$1
    log_info "Configurando MetalLB"
    EXEC_METALLB="kubectl apply -f scripts/manifest/metallb/manifest.yaml"
    ssh -o StrictHostKeyChecking=no -n root@${master_ip} "$EXEC_METALLB"
    log_success "MetalLB configurado com sucesso"
}

# Configure ArgoCD Ingress
function config_argocd_ingress() {
    local master_ip=$1
    log_info "Configurando TLS para o ArgoCD"
    EXEC_TLS="kubectl create secret tls high-domain-secret --key /root/tls.key --cert /root/tls.crt -n argocd"
    ssh -o StrictHostKeyChecking=no -n root@${master_ip} "$EXEC_TLS"
    
    log_info "Configurando ArgoCD Ingress"
    EXEC_ARGOCD="kubectl apply -f /root/scripts/manifest/argocd/argocd-ingress.yaml -n argocd"
    ssh -o StrictHostKeyChecking=no -n root@${master_ip} "$EXEC_ARGOCD"
    log_success "ArgoCD Ingress configurado com sucesso"
}

# Wait for pods with specific label to be running
function wait_for_pods() {
    local master_ip=$1
    local namespace=$2
    local label=$3
    local timeout=$4
    local interval=5
    
    log_info "Aguardando pods ${label} no namespace ${namespace}..."
    
    local elapsed=0
    while [ $elapsed -lt $timeout ]; do
        if ssh -o StrictHostKeyChecking=no -n root@${master_ip} "kubectl get pods -n ${namespace} -l ${label} | grep Running"; then
            log_success "Pods estão em execução"
            return 0
        fi
        sleep $interval
        elapsed=$((elapsed + interval))
        log_info "Aguardando pods... ($elapsed/$timeout segundos)"
    done
    
    log_error "Timeout aguardando pods"
    return 1
}

# Initialize Kubernetes cluster on master node
function k8sInstallServer() {
    log_info "Inicializando cluster Kubernetes no nó master"
    while read -r IP FQDN HOST SUBNET || [ -n "$IP" ]; do
        case "$HOST" in
            "server")
                # Define variables for master node
                define_k8s_variables "$IP"
                
                # Create TLS certificates
                log_info "Criando certificados TLS"
                ssh -o StrictHostKeyChecking=no -n root@${IP} "$TLS_CREATE"
                
                # Initialize Kubernetes cluster
                log_info "Inicializando cluster Kubernetes"
                ssh -o StrictHostKeyChecking=no -n root@${IP} "
                    ${KUBEADMIN_INIT} &&
                    ${K8S_CONFIG} &&
                    ${CILIUM_INSTALL} &&
                    ${CMD_METALLB} &&
                    ${CMD_INSTALL_HELM} &&
                    ${CMD_INSTALL_NGINX} &&
                    ${CMD_INSTALL_ARGOCD} &&
                    ${CMD_METRIC_SERVER}
                "
                
                # Get join command for worker nodes
                log_info "Obtendo comando para adicionar workers ao cluster"
                join_command=$(ssh -o StrictHostKeyChecking=no -n root@${IP} "sudo kubeadm token create --print-join-command")
                if [ -z "$join_command" ]; then
                    log_error "Não foi possível obter o comando para adicionar workers"
                    exit 1
                fi
                log_success "Cluster Kubernetes inicializado com sucesso"
                ;;
        esac
    done < "$MACHINES_FILE"
}

# Join worker nodes to the cluster
function workerAdd() {
    log_info "Adicionando nós workers ao cluster"
    worker_jobs=()
    while read IP FQDN HOST SUBNET; do
        case "$HOST" in
            worker-*)
                log_info "Adicionando worker ${HOST} ao cluster"
                # Run worker joins in background for parallel execution
                ssh -o StrictHostKeyChecking=no -n root@${IP} "sudo ${join_command}" &
                worker_jobs+=($!)
                ;;
            *)
                log_info "Host ${HOST} não é um worker. Nenhuma ação necessária."
                ;;
        esac
    done < "$MACHINES_FILE"
    
    # Wait for all worker joins to complete
    for job in "${worker_jobs[@]}"; do
        wait $job
    done
    log_success "Todos os workers foram adicionados ao cluster"
}

# Configure MetalLB
function metalLb() {
    log_info "Configurando componentes adicionais"
    while read -r IP FQDN HOST SUBNET || [ -n "$IP" ]; do
        case "$HOST" in
            "server")
                # Wait for MetalLB pods to be running
                log_info "Aguardando pods do MetalLB"
                TIMEOUT=300 # 5 minutes
                if ! wait_for_pods "$IP" "metallb-system" "app=metallb" "$TIMEOUT"; then
                    log_warning "Timeout aguardando pods do MetalLB, continuando mesmo assim"
                fi
                sleep 60
                # Configure MetalLB
                config_metal_lb "$IP"
                
                log_success "MetalLB configurado com sucesso"
                ;;
        esac
    done < "$MACHINES_FILE"
}

# Configure ArgoCD
function argocd() {
    log_info "Configurando ArgoCD"
    while read -r IP FQDN HOST SUBNET || [ -n "$IP" ]; do
        case "$HOST" in
            "server")
                # Configure ArgoCD Ingress
                config_argocd_ingress "$IP"
                
                log_success "ArgoCD configurado com sucesso"
                ;;
        esac
    done < "$MACHINES_FILE"
}

# Install Kube Prometheus Stack
function kps() {
    log_info "Instalando Kube Prometheus Stack"
    while read -r IP FQDN HOST SUBNET || [ -n "$IP" ]; do
        case "$HOST" in
            "server")
                # Define variables for master node
                define_k8s_variables "$IP"

                # Initialize Kubernetes cluster
                log_info "Executando instalação do Helm"
                ssh -o StrictHostKeyChecking=no -n root@${IP} "${CMD_KPS}"
                log_success "Kube Prometheus Stack instalado com sucesso"
                ;;
        esac
    done < "$MACHINES_FILE"
}

# Display help message
function show_help() {
    echo "Uso: $0 <comando>"
    echo ""
    echo "Comandos disponíveis:"
    echo "  init        - Inicializa o cluster Kubernetes no nó master"
    echo "  join        - Adiciona nós workers ao cluster"
    echo "  metallb     - Configura o balanceador de carga MetalLB"
    echo "  kps         - Instala o Kube Prometheus Stack"
    echo "  argocd      - Configura o Ingress do ArgoCD"
    echo "  all         - Executa todas as operações em sequência"
    echo "  help        - Exibe esta mensagem de ajuda"
}

# Execute all operations in sequence
function run_all() {
    banner
    log_info "---------------------------"
    log_info "   CONFIGURANDO CLUSTER K8S"
    log_info "---------------------------"
    
    k8sInstallServer
    workerAdd
    metalLb
    argocd
    kps
    
    log_success "Todas as operações foram concluídas com sucesso!"
}

#########################################################################
# Main Script Execution
#########################################################################

# Check if a command was provided
if [ $# -eq 0 ]; then
    log_error "Nenhum comando fornecido"
    show_help
    exit 1
fi

# Process the command
case "$1" in
    "init")
        k8sInstallServer
        ;;
    "join")
        workerAdd
        ;;
    "metallb")
        metalLb
        ;;
    "kps")
        kps
        ;;
    "argocd")
        argocd
        ;;
    "all")
        run_all
        ;;
    "help")
        show_help
        ;;
    *)
        log_error "Comando desconhecido: $1"
        show_help
        exit 1
        ;;
esac

exit 0